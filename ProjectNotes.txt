Project Overview

In this project you will write the JavaScript that powers your own online resume.

This project is meant to be completed while taking Choose Your Path - Front-End Developer. Throughout the course you'll build your resume by writing a JS script that will combine your personal information with pre-written HTML and CSS templates to generate your resume.

Why This Project?

Once you've mastered the skills of a front end web developer you'll want to make a great first impression. You need a resume that stands out.

The resume you build will not only help you build important skills, but will also make it easy to show employers why you’re perfect for the job. As you progress through this nanodegree you can update this resume with your new skills and projects.

What Will I Learn?

You will learn basic JavaScript syntax, which includes manipulating data types (like JSON), building loops and creating functions. At the same time, you’ll learn some simple jQuery DOM manipulation methods to build your resume the moment a user opens your website.

How Does This Help My Career?

It's a resume. Resumes help you get jobs.
JavaScript is the language of web development.
JavaScript lets you turn static web pages into dynamic applications.
Since it runs on normal web browsers, JavaScript is one of the most accessible and flexible programming languages.

How do I complete this project?

Complete the coursework in Choose Your Path - Front End Developer.
(Optional) If you would like to understand how this project is manipulating and traversing the DOM, check out Intro to jQuery.
Go through the videos and assignments in this course to learn the JavaScript necessary to build your resume.
Read all the project details outlined below and make sure you understand each part. If you are unsure of anything please check with your cohort or private message your cohorts coaches.
Fork the project repo from Github and begin building you resume.
Review your work against the Project Rubric (on the next page).
When you are satisfied with your project, submit it according to the Submission Instructions on the next page.
By the end:

Your resume will look something like this 

And your repository will include the following files:

index.html: The main HTML document. Contains links to all of the CSS and JS resources needed to render the resume, including resumeBuilder.js.
js/helper.js: Contains helper code needed to format the resume and build the map. It also has a few function shells for additional functionality. More on helper.js further down.
js/resumeBuilder.js: This file is empty. You should write your code here.
js/jQuery.js: The jQuery library.
css/style.css: Contains all of the CSS needed to style the page.
README.md: The GitHub readme file.
and some images in the images directory.
Your starting point...

js/helper.js

Within helper.js, you’ll find a large collection of strings containing snippets of HTML. Within many snippets, you’ll find placeholder data in the form of %data% or %contact%.

Each string has a title that describes how it should be used. For instance, HTMLworkStart should be the first <div> in the Work section of the resume. HTMLschoolLocation contains a %data% placeholder which should be replaced with the location of one of your schools.

Your process:

The resume has four distinct sections: work, education, projects and a header with biographical information. You’ll need to:

Build four JSON objects, each one representing a different resume section. The objects that you create need to follow the schema below exactly. Property names are case-sensitive. Make sure your JSON objects are formatted correctly using JSONlint.com.
bio contains:

      name : string
      role : string
      contacts : an object with
            mobile: string
            email: string 
            github: string
            twitter: string (optional)
            location: string
      welcomeMessage: string 
      skills: array of strings
      biopic: url
      display: function
education contains:

      schools: array of objects with
           name: string
           location: string
           degree: string
           majors: array of strings
           dates: string (works with a hyphen between them)
           url: string
      onlineCourses: array of objects with
           title: string
           school: string
           date: string (works with a hyphen between them)
           url: string
      display: function
work contains

      jobs: array of objects with
           employer: string 
           title: string 
           location: string 
           dates: string (Can be 'in progress')
           description: string 
      display: function
projects contains:

      projects: array of objects with
            title: string 
            dates: string (works with a hyphen between them)
            description: string
            images: array with string urls
            display: function
Iterate through each JSON object and append its information to index.html in the correct section.
First off, you’ll be using jQuery’s selector.append() and selector.prepend() functions to modify index.html. selector.append() makes an element appear at the end of a selected section. selector.prepend() makes an element appear at the beginning of a selected section.
Pay close attention to the ids of the <div>s in index.html and the HTML snippets in helper.js. They’ll be very useful as jQuery selectors for selector.append() and selector.prepend()
You’ll also be using the JavaScript method string.replace(old, new) to swap out all the placeholder text (e.g. %data%) for data from your resume JSON objects.
Here’s an example of some code that would add the location of one your companies to the page:
var formattedLocation = HTMLworkLocation.replace("%data%", work.jobs[job].location);
$(".work-entry:last").append(formattedLocation);
Use the mockup at the bottom of this document as a guide for the order in which you should append elements to the page.
The resume includes an interactive map. Do the following to add it.
In resumeBuilder.js, append the googleMap string to <div id=”mapDiv”>.
In index.html, uncomment the Google script element: <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?libraries=places"></script>
In helper.js, at the bottom of the file, uncomment code to initialize map and set fitBounds.
All of your code for adding elements to the resume should be within functions. And all of your functions should be encapsulated within the same objects containing your resume data. For instance, your functions for appending work experience elements to the page should be found within the same object containing data about your work experience.
Your resume should also console.log() information about click locations. On line 90 in helper.js, you’ll find a jQuery onclick handler that you’ll need to modify to work with the logClicks(x,y) function above it.
It’s possible to make additional information show up when you click on the pins in the map. Check out line 174 in helper.js and the Google Maps API to get started.

Important! There are two more steps required to make the map work properly.

Uncomment the last block of code in helper.js. The code you need starts with window.addEventListener('load', initializeMap); and goes until the end of the file.
Uncomment the <script> tag for Google Maps API in the <head> of index.html.
The reason these instructions weren't included in the video is that we didn't realize until late that these lines produce errors if you don't .append() a map to the page. Our bad.

Lastly, see how there's #mapDiv in the video? You might see it as #map-div in the actual project.

Want to learn about HTML and CSS? Try out Intro to HTML and CSS.

Want to check out your classmates' resumes? Check them out on [GitHub](https://github.com/search?utf8=%E2%9C%93&q=frontend-nanodegree-resume). 

Frontend Nanodegree Styleguide: https://udacity.github.io/frontend-nanodegree-styleguide/javascript.html

